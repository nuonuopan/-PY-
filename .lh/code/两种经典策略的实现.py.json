{
    "sourceFile": "code/两种经典策略的实现.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1653989989366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1653990608249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,12 +114,11 @@\n print('夏普比率：\\n',round(ffn.calc_sharpe(capital_returns),4)*100,'%')\r\n #计算索提诺比率（策略亏损的风险） 大好\r\n print('索提诺比率：\\n',round(ffn.calc_sortino_ratio(capital_returns),4)*100,'%')\r\n #可视化资金曲线\r\n+%matplotlib inline\r\n import matplotlib.pyplot as plt\r\n import matplotlib as mpl\r\n-import matplotlib\r\n-matplotlib.use('module://matplotlib_inline.backend_inline')\r\n mpl.rcParams['font.sans-serif'] = [\"SimHei\"]    # 指定默认字体\r\n mpl.rcParams['axes.unicode_minus'] = False \r\n fig=plt.figure()\r\n fig.add_subplot(111)\r\n"
                },
                {
                    "date": 1653992317693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,11 +114,8 @@\n print('夏普比率：\\n',round(ffn.calc_sharpe(capital_returns),4)*100,'%')\r\n #计算索提诺比率（策略亏损的风险） 大好\r\n print('索提诺比率：\\n',round(ffn.calc_sortino_ratio(capital_returns),4)*100,'%')\r\n #可视化资金曲线\r\n-import matplotlib\r\n-matplotlib.use('module://matplotlib_inline.backend_inline')\r\n-print(matplotlib.get_backend())\r\n %matplotlib inline\r\n import matplotlib.pyplot as plt\r\n import matplotlib as mpl\r\n mpl.rcParams['font.sans-serif'] = [\"SimHei\"]    # 指定默认字体\r\n"
                }
            ],
            "date": 1653989989366,
            "name": "Commit-0",
            "content": "\r\n#%%从tushare并保存本地获取数据\r\nimport tushare as ts\r\nts_pro=ts.pro_api()\r\nts_code='000001.SZ'\r\nstart_date='20180101'\r\nend_date='20191230'\r\ndf=ts_pro.daily(ts_code=ts_code,start_date=start_date,end_date=end_date)\r\ndf=df.reindex(index=df.index[::-1])\r\nused_cols=['trade_date','close']\r\ndf=df[used_cols]\r\ndf.to_csv(r'F:\\assert\\《Py量化金融》\\data\\{0}_{1}_{2}.csv'.format(ts_code,start_date,end_date),index=False)\r\n\r\n\r\n#%%\r\n#MA10 和 MA20 双均线策略\r\n#%%\r\nimport pandas as pd\r\nimport numpy as np\r\nimport ffn\r\n\r\n\r\n#从本地导入数据\r\ndf=pd.read_csv(r'F:\\assert\\《Py量化金融》\\data\\000001.SZ_20180101_20191230.csv')\r\n\r\n\r\n#初始化全局变量\r\n#是否持仓\r\nhold=False\r\n#持仓数\r\npos=0\r\n#回测资金\r\ncapital=100000\r\n#剩余资金\r\nrest=0\r\n#手续费万分之三\r\nfee=0.0003\r\n#每日资金数列表\r\ncapital_list=[]\r\n#20日均线数组\r\nMA20_array=np.zeros(20)\r\n#10日均线数组\r\nMA10_array=np.zeros(10)\r\n#交易次数\r\ncount=0\r\n# #记录交易盈亏\r\n# profit_loss=[]\r\n# 计算每日的MA10 和MA20，并且每条数据都进行开仓、平仓判断\r\n# 遍历每一条历史数据\r\nfor i in range(len(df)):\r\n    #k用来标记时候进行了运算\r\n    k=0\r\n    #最新数据\r\n    price=df['close'][i]\r\n    date=df['trade_date'][i]\r\n    #数据平移\r\n    MA10_array[0:9]=MA10_array[1:10]\r\n    MA20_array[0:19]=MA20_array[1:20]\r\n    #新数据添加到数据组末尾\r\n    MA10_array[-1]=price\r\n    MA20_array[-1]=price\r\n    #for循环小于20下面的语句不会执行\r\n    if i<20:\r\n        continue\r\n    MA10=MA10_array.mean()\r\n    MA20=MA20_array.mean()\r\n    #判断是否达到开平仓信号\r\n    #开仓\r\n    if MA10>MA20 and hold==False:\r\n        #计算开仓数目\r\n        pos=int(capital/price/100)*100\r\n        #计算剩余资金\r\n        rest=capital-pos*price*(1+fee)\r\n        #持仓设置为True\r\n        hold=True\r\n        print('buy at',date,'price',price,'capital',capital)\r\n        count=count+1\r\n        print(count)\r\n        # k=1\r\n    #平仓\r\n    elif MA10<MA20 and hold==True:\r\n        #计算平仓后的资金\r\n        capital=pos*price*(1-fee)+rest\r\n        #持仓数归0\r\n        pos=0\r\n        #持仓状态设置为False\r\n        hold=False\r\n        print('buy at',date,'price',price,'capital',capital)\r\n        count=count+1\r\n        print(count)\r\n        # k=1\r\n    #计算每日的资金数目\r\n    if hold==True:\r\n        capital_list.append(rest+pos*price)\r\n    else:\r\n        capital_list.append(capital)\r\n    \r\n    # #计算每次交易的盈亏\r\n    # if k==1\r\n\r\n#计算回测结果\r\n#每日资金数目变series\r\ncapital_series=pd.Series(capital_list)\r\n#资金序列的简单收益序列\r\ncapital_return=capital_series.shift(1)-capital_series\r\n#资金序列的简单收益率序列\r\ncapital_returns=ffn.to_returns(capital_series)\r\n\r\n#计算策略收益率 大好  策略结束时总共的收益率\r\nprint('策略收益率：\\n',round(ffn.calc_total_return(capital_series),4)*100,'%')\r\n#计算最大回撤 小好\r\nprint('最大回撤:\\n',round(ffn.calc_max_drawdown(capital_series),4)*100,'%')\r\n#计算夏普比率 大好\r\nprint('夏普比率：\\n',round(ffn.calc_sharpe(capital_returns),4)*100,'%')\r\n#计算索提诺比率（策略亏损的风险） 大好\r\nprint('索提诺比率：\\n',round(ffn.calc_sortino_ratio(capital_returns),4)*100,'%')\r\n#可视化资金曲线\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib as mpl\r\nimport matplotlib\r\nmatplotlib.use('module://matplotlib_inline.backend_inline')\r\nmpl.rcParams['font.sans-serif'] = [\"SimHei\"]    # 指定默认字体\r\nmpl.rcParams['axes.unicode_minus'] = False \r\nfig=plt.figure()\r\nfig.add_subplot(111)\r\nplt.plot(capital_list,color='r')\r\nplt.title('双均线策略的资金曲线')\r\nplt.show()\r\n\r\n\r\n#%%\r\n#RSI6策略\r\n#%%\r\nimport pandas as pd\r\nimport numpy as np\r\nimport ffn\r\nimport talib\r\n\r\ndf=pd.read_csv(r'F:\\assert\\《Py量化金融》\\data\\000001.SZ_20180101_20191230.csv')\r\n\r\n\r\n#初始化全局变量\r\n#是否持仓\r\nhold=False\r\n#持仓数\r\npos=0\r\n#回测资金\r\ncapital=100000\r\n#剩余资金\r\nrest=0\r\n#手续费万分之三\r\nfee=0.0003\r\n#每日资金数列表\r\ncapital_list=[]\r\n#用于计算RSI6指标的数组\r\nRSI6_array=np.zeros(7)\r\n#交易次数\r\ncount=0\r\n# #记录交易盈亏\r\n# profit_loss=[]\r\n# 计算每日的MA10 和MA20，并且每条数据都进行开仓、平仓判断\r\n# 遍历每一条历史数据\r\nfor i in range(len(df)):\r\n    #k用来标记时候进行了运算\r\n    k=0\r\n    #最新数据\r\n    price=df['close'][i]\r\n    date=df['trade_date'][i]\r\n    #数据平移\r\n    RSI6_array[0:6]=RSI6_array[1:7]\r\n    #新数据添加到数据组末尾\r\n    RSI6_array[-1]=price\r\n    #for循环小于20下面的语句不会执行\r\n    if i<6:\r\n        continue\r\n    rsi6=talib.RSI(RSI6_array,timeperiod=6)[-1]\r\n    #判断是否达到开平仓信号\r\n    #开仓\r\n    if rsi6<=20 and hold==False:\r\n        #计算开仓数目\r\n        pos=int(capital/price/100)*100\r\n        #计算剩余资金\r\n        rest=capital-pos*price*(1+fee)\r\n        #持仓设置为True\r\n        hold=True\r\n        print('buy at',date,'price',price,'capital',capital)\r\n        count=count+1\r\n        print(count)\r\n        # k=1\r\n    #平仓\r\n    elif rsi6>=80 and hold==True:\r\n        #计算平仓后的资金\r\n        capital=pos*price*(1-fee)+rest\r\n        #持仓数归0\r\n        pos=0\r\n        #持仓状态设置为False\r\n        hold=False\r\n        print('buy at',date,'price',price,'capital',capital)\r\n        count=count+1\r\n        print(count)\r\n        # k=1\r\n    #计算每日的资金数目\r\n    if hold==True:\r\n        capital_list.append(rest+pos*price)\r\n    else:\r\n        capital_list.append(capital)\r\n    \r\n    # #计算每次交易的盈亏\r\n    # if k==1\r\n\r\n#计算回测结果\r\n#每日资金数目变series\r\ncapital_series=pd.Series(capital_list)\r\n#资金序列的简单收益序列\r\ncapital_return=capital_series.shift(1)-capital_series\r\n#资金序列的简单收益率序列\r\ncapital_returns=ffn.to_returns(capital_series)\r\n\r\n#计算策略收益率 大好  策略结束时总共的收益率\r\nprint('策略收益率：\\n',round(ffn.calc_total_return(capital_series),4)*100,'%')\r\n#计算最大回撤 小好\r\nprint('最大回撤:\\n',round(ffn.calc_max_drawdown(capital_series),4)*100,'%')\r\n#计算夏普比率 大好\r\nprint('夏普比率：\\n',round(ffn.calc_sharpe(capital_returns),4)*100,'%')\r\n#计算索提诺比率（策略亏损的风险） 大好\r\nprint('索提诺比率：\\n',round(ffn.calc_sortino_ratio(capital_returns),4)*100,'%')\r\n\r\n# import matplotlib.pyplot as plt\r\n# import matplotlib as mpl\r\n# mpl.rcParams['font.sans-serif'] = [\"SimHei\"]    # 指定默认字体\r\n# mpl.rcParams['axes.unicode_minus'] = False \r\n# fig=plt.figure()\r\n# fig.add_subplot(111)\r\n# plt.plot(capital_list,color='r')\r\n# plt.title('RSI6策略的资金曲线')\r\n# fig.savefig(r'C:\\Users\\nuonu\\Desktop\\6.png')\r\n\r\n%matplotlib inline\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nmpl.rcParams['font.sans-serif'] = [\"SimHei\"]    # 指定默认字体\r\nmpl.rcParams['axes.unicode_minus'] = False \r\nplt.plot(capital_list,color='b')\r\nplt.title('RSI6策略的资金曲线')\r\nplt.show()\r\n\r\n\r\n#%%\r\n\r\n导入某个库后matplotlib画图会出错：\r\n__main__:9: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.\r\n\r\n\r\n在其他项目都可正常绘图的情况下，则不会是缺少某个库导致的。根本原因是：import导入的某一个库改变了print(matplotlib.get_backend())图像输出位置。\r\n该函数正常情况下返回值为module://matplotlib_inline.backend_inline，而被改变为 Agg。\r\n\r\n# 查看matplotlib是否被改变，返回agg则被改变\r\nimport matplotlib\r\nprint(matplotlib.get_backend())\r\n# 可以重新进入内核看是哪个库改变了mpl图像的输出位置\r\nimport pandas as pd\r\nprint(matplotlib.get_backend())\r\nimport numpy as np\r\nprint(matplotlib.get_backend())\r\nimport matplotlib.pyplot as plt\r\nprint(matplotlib.get_backend())\r\nimport matplotlib as mpl\r\nprint(matplotlib.get_backend())\r\nimport talib\r\nprint(matplotlib.get_backend())\r\nimport ffn\r\nprint(matplotlib.get_backend())\r\n\r\n# 发现是ffn改变了mpl图像输出位置\r\n\r\n解决方式：\r\n①仅解决显示问题\r\n输入 %matplotlib inline \r\n可以看到print(matplotlib.get_backend())恢复初始值\r\n\r\n\r\n②保存图片输出查看\r\nfig=plt.figure()\r\nfig.add_subplot(111)\r\nplt.plot(capital_list,color='r')\r\nplt.title('双均线策略的资金曲线')\r\nplt.show()\r\nfig.savefig(r'C:\\Users\\nuonu\\Desktop\\a.png')\r\n\r\n③全局重制\r\n在 import hydrofunctions as hf 后将 matplotlib.get_backend() 值重新修改会正常值\r\nmatplotlib.use('module://matplotlib_inline.backend_inline')\r\n\r\n\r\n[Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure 问题](https://blog.csdn.net/a18892061545/article/details/122004704)"
        }
    ]
}